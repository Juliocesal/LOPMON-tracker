// src/components/tickets.tsx
import React, { useState, useEffect } from 'react';
import { Ticket, TicketFilter, TicketStats } from '../hooks/types';
import { 
  getTickets, 
  getTicketStats, 
  deleteTicket, 
  changeTicketStatus 
} from '../api/ChatApi';
import TicketForm from './TicketForm';
import Loading from './Loading';
import './TicketManagement.css';

const TicketManagement: React.FC = () => {
  const [tickets, setTickets] = useState<Ticket[]>([                {/* Gesti√≥n y Asignaci√≥n */}
                <div className="detail-card tertiary">
                  <h3><span className="card-icon">üë•</span>Gesti√≥n y Asignaci√≥n</h3>
                  <div className="detail-items">  const [stats, setStats] = useState<TicketStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [selectedTicket, setSelectedTicket] = useState<Ticket | null>(null);
  const [showModal, setShowModal] = useState(false);
  const [showForm, setShowForm] = useState(false);
  const [editingTicket, setEditingTicket] = useState<Ticket | null>(null);
  const [filters, setFilters] = useState<TicketFilter>({});
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    loadTickets();
    loadStats();
  }, [filters]);

  const loadTickets = async () => {
    try {
      setLoading(true);
      const data = await getTickets(filters);
      setTickets(data);
    } catch (error) {
      console.error('Error loading tickets:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadStats = async () => {
    try {
      const data = await getTicketStats();
      setStats(data);
    } catch (error) {
      console.error('Error loading stats:', error);
    }
  };

  const handleSearch = () => {
    setFilters({ ...filters, search: searchTerm });
  };

  const handleStatusChange = async (ticketId: string, newStatus: Ticket['status']) => {
    try {
      await changeTicketStatus(ticketId, newStatus);
      loadTickets();
      loadStats();
    } catch (error) {
      console.error('Error updating ticket status:', error);
    }
  };

  const handleDeleteTicket = async (ticketId: string) => {
    if (window.confirm('¬øEst√°s seguro de que quieres eliminar este ticket?')) {
      try {
        await deleteTicket(ticketId);
        loadTickets();
        loadStats();
      } catch (error) {
        console.error('Error deleting ticket:', error);
      }
    }
  };

  const openTicketModal = (ticket: Ticket) => {
    setSelectedTicket(ticket);
    setShowModal(true);
  };

  const handleNewTicket = () => {
    setEditingTicket(null);
    setShowForm(true);
  };

  const handleEditTicket = (ticket: Ticket) => {
    setEditingTicket(ticket);
    setShowForm(true);
  };

  const handleFormSuccess = () => {
    setShowForm(false);
    setEditingTicket(null);
    loadTickets();
    loadStats();
  };

  const handleFormCancel = () => {
    setShowForm(false);
    setEditingTicket(null);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return '#3742fa';
      case 'in_progress': return '#ffa502';
      case 'resolved': return '#2ed573';
      case 'closed': return '#747d8c';
      default: return '#70a1ff';
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getPriorityIcon = (priority?: string) => {
    switch (priority) {
      case 'urgent': return '‚óè';
      case 'high': return '‚óè';
      case 'medium': return '‚óè';
      case 'low': return '‚óè';
      default: return '‚óã';
    }
  };

  const getPriorityColor = (priority?: string) => {
    switch (priority) {
      case 'urgent': return '#dc3545';
      case 'high': return '#fd7e14';
      case 'medium': return '#ffc107';
      case 'low': return '#198754';
      default: return '#6c757d';
    }
  };

  const getStatusLabel = (status: string) => {
    switch (status) {
      case 'open': return 'Abierto';
      case 'in_progress': return 'En Progreso';
      case 'resolved': return 'Resuelto';
      case 'closed': return 'Cerrado';
      default: return status;
    }
  };

  const isOverdue = (dueDateString?: string) => {
    if (!dueDateString) return false;
    return new Date(dueDateString) < new Date();
  };

  if (loading) {
    return <Loading message="Cargando tickets..." />;
  }

  return (
    <div className="tickets-container">
      {/* Header */}
      <div className="tickets-header">
        <h1>Gesti√≥n de Tickets</h1>
        <button className="btn-primary" onClick={handleNewTicket}>
          + Nuevo Ticket
        </button>
      </div>

      {/* Stats Cards */}
      {stats && (
        <div className="stats-grid">
          <div className="stat-card total">
            <div className="stat-icon">üìä</div>
            <div className="stat-content">
              <h3>{stats.total}</h3>
              <p>Total de Tickets</p>
            </div>
          </div>
          <div className="stat-card open">
            <div className="stat-icon">üîì</div>
            <div className="stat-content">
              <h3>{stats.open}</h3>
              <p>Abiertos</p>
            </div>
          </div>
          <div className="stat-card progress">
            <div className="stat-icon">‚ö°</div>
            <div className="stat-content">
              <h3>{stats.in_progress}</h3>
              <p>En Progreso</p>
            </div>
          </div>
          <div className="stat-card resolved">
            <div className="stat-icon">‚úÖ</div>
            <div className="stat-content">
              <h3>{stats.resolved}</h3>
              <p>Resueltos</p>
            </div>
          </div>
          <div className="stat-card priority">
            <div className="stat-icon">üî•</div>
            <div className="stat-content">
              <h3>{stats.high_priority}</h3>
              <p>Alta Prioridad</p>
            </div>
          </div>
          <div className="stat-card overdue">
            <div className="stat-icon">‚è∞</div>
            <div className="stat-content">
              <h3>{stats.overdue}</h3>
              <p>Vencidos</p>
            </div>
          </div>
        </div>
      )}

      {/* Filters */}
      <div className="filters-section">
        <div className="filters-main-row">
          <div className="search-bar">
            <input
              type="text"
              placeholder="Buscar tickets..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
            />
            <button onClick={handleSearch} className="search-btn">üîç</button>
          </div>
          
          <div className="filter-controls">
            <select 
              value={filters.status || ''} 
              onChange={(e) => setFilters({ ...filters, status: e.target.value || undefined })}
            >
              <option value="">Todos los estados</option>
              <option value="open">Abierto</option>
              <option value="in_progress">En Progreso</option>
              <option value="resolved">Resuelto</option>
              <option value="closed">Cerrado</option>
            </select>

            <select 
              value={filters.type || ''} 
              onChange={(e) => setFilters({ ...filters, type: e.target.value || undefined })}
            >
              <option value="">Todos los tipos</option>
              <option value="exception">Excepci√≥n</option>
              <option value="inventory">Inventario</option>
              <option value="technical">T√©cnico</option>
              <option value="general">General</option>
            </select>

            <input
              type="text"
              placeholder="Filtrar por ubicaci√≥n..."
              value={filters.location || ''}
              onChange={(e) => setFilters({ ...filters, location: e.target.value || undefined })}
              className="filter-input"
            />

            <input
              type="text"
              placeholder="Filtrar por usuario..."
              value={filters.user || ''}
              onChange={(e) => setFilters({ ...filters, user: e.target.value || undefined })}
              className="filter-input"
            />
          </div>
        </div>
      </div>

      {/* Tickets Table */}
      <div className="tickets-table-container">
        <div className="tickets-table-wrapper">
          <table className="tickets-table">
            <thead>
              <tr>
                <th>ID</th>
                <th>Estado</th>
                <th>Creado</th>
                <th>Ubicaci√≥n</th>
                <th>N√∫mero Tote</th>
                <th>Stock ID</th>
                <th>Chat ID</th>
                <th>Tipo</th>
                <th>Usuario</th>
                <th>Creado por</th>
                <th>Acciones</th>
              </tr>
            </thead>
            <tbody>
              {tickets.map((ticket) => (
                <tr key={ticket.id} className="ticket-row">
                  <td className="ticket-id">
                    <div className="ticket-id-container">
                      #{ticket.id.slice(-8)}
                      {ticket.priority && (
                        <span 
                          className="priority-indicator"
                          style={{ color: getPriorityColor(ticket.priority) }}
                          title={`Prioridad: ${ticket.priority}`}
                        >
                          {getPriorityIcon(ticket.priority)}
                        </span>
                      )}
                      {isOverdue(ticket.due_date) && (
                        <span className="overdue-indicator" title="Vencido">!</span>
                      )}
                    </div>
                  </td>
                  <td>
                    <select
                      value={ticket.status}
                      onChange={(e) => handleStatusChange(ticket.id, e.target.value as Ticket['status'])}
                      className="status-select"
                      style={{ backgroundColor: getStatusColor(ticket.status) }}
                    >
                      <option value="open">Abierto</option>
                      <option value="in_progress">En Progreso</option>
                      <option value="resolved">Resuelto</option>
                      <option value="closed">Cerrado</option>
                    </select>
                  </td>
                  <td className="date-cell">{formatDate(ticket.created_at)}</td>
                  <td className="location-cell">{ticket.location || 'N/A'}</td>
                  <td className="tote-number-cell">{ticket.tote_number || 'N/A'}</td>
                  <td className="stock-id-cell">{ticket.stock_id || 'N/A'}</td>
                  <td className="chat-id-cell">
                    {ticket.chat_id ? `#${ticket.chat_id.slice(-8)}` : 'N/A'}
                  </td>
                  <td className="type-cell">
                    <span className="type-badge">{ticket.type || 'General'}</span>
                  </td>
                  <td className="user-cell">{ticket.user || 'N/A'}</td>
                  <td className="created-by-cell">{ticket.created_by || 'N/A'}</td>
                  <td className="actions-cell">
                    <button 
                      onClick={() => openTicketModal(ticket)}
                      className="btn-action view"
                      title="Ver detalles"
                    >
                      üëÅÔ∏è
                    </button>
                    <button 
                      onClick={() => handleEditTicket(ticket)}
                      className="btn-action edit"
                      title="Editar"
                    >
                      ‚úèÔ∏è
                    </button>
                    <button 
                      onClick={() => handleDeleteTicket(ticket.id)}
                      className="btn-action delete"
                      title="Eliminar"
                    >
                      üóëÔ∏è
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Ticket Detail Modal */}
      {showModal && selectedTicket && (
        <div className="modal-overlay" onClick={() => setShowModal(false)}>
          <div className="modal-content ticket-detail-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <div className="header-content">
                <div className="header-main">
                  <h2>Ticket #{selectedTicket.id.slice(-8)}</h2>
                  <div className="header-badges">
                    <span 
                      className="status-badge"
                      style={{ backgroundColor: getStatusColor(selectedTicket.status) }}
                    >
                      {getStatusLabel(selectedTicket.status)}
                    </span>
                    {selectedTicket.priority && (
                      <span 
                        className="priority-badge"
                        style={{ backgroundColor: getPriorityColor(selectedTicket.priority) }}
                      >
                        {getPriorityIcon(selectedTicket.priority)} {selectedTicket.priority?.toUpperCase()}
                      </span>
                    )}
                    {isOverdue(selectedTicket.due_date) && (
                      <span className="overdue-badge">
                        ! VENCIDO
                      </span>
                    )}
                  </div>
                </div>
                {selectedTicket.title && (
                  <div className="header-title">
                    <h3>{selectedTicket.title}</h3>
                  </div>
                )}
              </div>
              <button onClick={() => setShowModal(false)} className="close-btn">‚úï</button>
            </div>
            
            <div className="modal-body">
              <div className="ticket-detail-grid">
                {/* Informaci√≥n General */}
                <div className="detail-card primary">
                  <h3><span className="card-icon">üìã</span>Informaci√≥n General</h3>
                  <div className="detail-items">
                    <div className="detail-item">
                      <label>ID Completo:</label>
                      <span className="monospace">{selectedTicket.id}</span>
                    </div>
                    <div className="detail-item">
                      <label>Tipo:</label>
                      <span className="type-badge">{selectedTicket.type || 'General'}</span>
                    </div>
                    <div className="detail-item">
                      <label>Categor√≠a:</label>
                      <span>{selectedTicket.category || 'No especificado'}</span>
                    </div>
                    <div className="detail-item">
                      <label>Creado:</label>
                      <span className="datetime">{formatDate(selectedTicket.created_at)}</span>
                    </div>
                    {selectedTicket.updated_at && (
                      <div className="detail-item">
                        <label>√öltima actualizaci√≥n:</label>
                        <span className="datetime">{formatDate(selectedTicket.updated_at)}</span>
                      </div>
                    )}
                    {selectedTicket.due_date && (
                      <div className="detail-item">
                        <label>Fecha l√≠mite:</label>
                        <span className={`datetime ${isOverdue(selectedTicket.due_date) ? 'overdue' : ''}`}>
                          {formatDate(selectedTicket.due_date)}
                        </span>
                      </div>
                    )}
                  </div>
                </div>

                {/* Ubicaci√≥n y Stock */}
                <div className="detail-card secondary">
                  <h3><span className="card-icon">üì¶</span>Ubicaci√≥n y Stock</h3>
                  <div className="detail-items">
                    <div className="detail-item">
                      <label>Ubicaci√≥n:</label>
                      <span className="highlight">{selectedTicket.location || 'No especificado'}</span>
                    </div>
                    <div className="detail-item">
                      <label>N√∫mero de Tote:</label>
                      <span className="highlight">{selectedTicket.tote_number || 'No especificado'}</span>
                    </div>
                    <div className="detail-item">
                      <label>Stock ID:</label>
                      <span className="monospace">{selectedTicket.stock_id || 'No especificado'}</span>
                    </div>
                    <div className="detail-item">
                      <label>Chat ID:</label>
                      <span className="monospace">
                        {selectedTicket.chat_id ? `#${selectedTicket.chat_id.slice(-8)}` : 'No especificado'}
                      </span>
                    </div>
                  </div>
                </div>

                {/* Gesti√≥n y Asignaci√≥n */}
                <div className="detail-card tertiary">
                  <div className="card-icon">ÔøΩ</div>
                  <h3>Gesti√≥n y Asignaci√≥n</h3>
                  <div className="detail-items">
                    <div className="detail-item">
                      <label>Usuario (Operador):</label>
                      <span className="user-badge">{selectedTicket.user || 'No especificado'}</span>
                    </div>
                    <div className="detail-item">
                      <label>Creado por (Agente):</label>
                      <span className="user-badge">{selectedTicket.created_by || 'No especificado'}</span>
                    </div>
                    {selectedTicket.assigned_to && (
                      <div className="detail-item">
                        <label>Asignado a:</label>
                        <span className="user-badge assigned">{selectedTicket.assigned_to}</span>
                      </div>
                    )}
                    {(selectedTicket.customer_name || selectedTicket.customer_email) && (
                      <>
                        {selectedTicket.customer_name && (
                          <div className="detail-item">
                            <label>Cliente:</label>
                            <span>{selectedTicket.customer_name}</span>
                          </div>
                        )}
                        {selectedTicket.customer_email && (
                          <div className="detail-item">
                            <label>Email Cliente:</label>
                            <span className="email">{selectedTicket.customer_email}</span>
                          </div>
                        )}
                      </>
                    )}
                  </div>
                </div>
              </div>
              
              {/* Descripci√≥n */}
              {selectedTicket.description && (
                <div className="detail-card description-card">
                  <div className="card-icon">üìù</div>
                  <h3>Descripci√≥n</h3>
                  <div className="description-content">
                    <p>{selectedTicket.description}</p>
                  </div>
                </div>
              )}
              
              {/* Resoluci√≥n */}
              {selectedTicket.resolution && (
                <div className="detail-card resolution-card">
                  <div className="card-icon">üîß</div>
                  <h3>Resoluci√≥n</h3>
                  <div className="resolution-content">
                    <p>{selectedTicket.resolution}</p>
                  </div>
                </div>
              )}

              {/* Actions */}
              <div className="modal-actions">
                <button 
                  onClick={() => {
                    setShowModal(false);
                    handleEditTicket(selectedTicket);
                  }}
                  className="btn-action-modal edit"
                >
                  ‚úé Editar Ticket
                </button>
                <button 
                  onClick={() => {
                    if (window.confirm('¬øEst√°s seguro de que quieres eliminar este ticket?')) {
                      handleDeleteTicket(selectedTicket.id);
                      setShowModal(false);
                    }
                  }}
                  className="btn-action-modal delete"
                >
                  ‚úï Eliminar
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Ticket Form Modal */}
      {showForm && (
        <div className="modal-overlay" onClick={handleFormCancel}>
          <div className="modal-content-form" onClick={(e) => e.stopPropagation()}>
            <TicketForm 
              ticket={editingTicket}
              onSuccess={handleFormSuccess}
              onCancel={handleFormCancel}
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default TicketManagement;
